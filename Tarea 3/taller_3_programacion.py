# -*- coding: utf-8 -*-
"""Taller 3 programacion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SSmErrcTKW3RmM7bPGJA6EUqiwaqPnyA

# INSTALAR REPORTLAB
"""

pip install reportlab

!pip install untangle

"""# IMPORTAR LIBRERIAS"""

import os
import xml.etree.ElementTree as ET
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib import utils
import untangle

"""# CREAR CARPETA DOWNLOADS"""

output_folder = '/content/downloads'
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

"""#Generación de la información"""

def generar_pdf(xml_path, pdf_output):
    tree = ET.parse(xml_path)
    root = tree.getroot()
    return root

xml_path = '/content/01/2.- ARQ_PUE VS EST.xml'
pdf_output = '/content/downloads/resultado.pdf'
document = generar_pdf('/content/01/2.- ARQ_PUE VS EST.xml','/content/downloads/resultado.pdf')

def generar_pdf(xml_path, pdf_output):
    tree = ET.parse(xml_path)
    root = tree.getroot()

    c = canvas.Canvas(pdf_output, pagesize=letter)
    width, height = letter

    contador_conflictos = 1

    for clashresult in root.findall('.//clashresult'):
        nombre_conflicto = f"Conflicto {contador_conflictos}"
        imagen_filename = clashresult.get('href')
        distancia = clashresult.get('distance')
        clashpoint = clashresult.find('.//clashpoint/pos3f')
        x, y, z = clashpoint.get('x'), clashpoint.get('y'), clashpoint.get('z')
        gridlocation = clashresult.find('gridlocation').text

print ()

print(document.exchange.batchtests.clashtests.clashtest["name"])

"""#Ejemplo de listas

"""

def generar_pdf(xml_path, pdf_output):
    tree = ET.parse(xml_path)
    root = tree.getroot()

    c = canvas.Canvas(pdf_output, pagesize=letter)
    width, height = letter

    contador_conflictos = 1
    nombres_conflictos = []
    imagenes = []




    for clashresult in root.findall('.//clashresult'):
        nombre_conflicto = f"Conflicto {contador_conflictos}"
        nombres_conflictos.append(nombre_conflicto)
        imagen_filename = clashresult.get('href')
        imagenes.append(imagen_filename)
        distancia = clashresult.get('distance')
        clashpoint = clashresult.find('.//clashpoint/pos3f')
        x, y, z = clashpoint.get('x'), clashpoint.get('y'), clashpoint.get('z')
        gridlocation = clashresult.find('gridlocation').text

"""# FUNCION GENERAR PDF"""

def generar_pdf(xml_path, pdf_output):
    tree = ET.parse(xml_path)
    root = tree.getroot()

    c = canvas.Canvas(pdf_output, pagesize=letter)
    width, height = letter

    contador_conflictos = 1
    Nombre_reporte = []
    Tolerancia = []
    Interferencias_totales = []
    Interferencias_abiertas = []
    Interferencias_resueltas = []
    Nombres_confictos = []
    Imagenes_reportes = []
    Estados_interferecnias = []
    Distancias_interferencias = []
    Ejes_X = []
    Ejes_Y = []
    Ejes_Z = []
    Nivel_interferencia = []
    Años = []
    Meses = []
    Dias = []
    Nombre informe = []
    ID_elemento_1 = []
    Nivel_elemento_1 = []
    Nombre_elemento_1 = []
    Valor_nombre_elemento_1 = []
    Tipo_elemento_1 = []
    Tipo_nombre_elemento_1 = []
    ID_elemento_2 = []
    Nivel_elemento_2 = []
    Nombre_elemento_2 = []
    Valor_nombre_elemento_2 = []
    Tipo_elemento_2 = []
    Tipo_nombre_elemento_2 = []


    for clashtest in root.find(.//clashtest'):
        nombre_todo = clashtest.get('name')
        Nombre_reporte.append(nombre_todo)
        tolerancia = clashtest.get('tolerance')
        Tolerancia.append(tolerancia)
        summary = clashtest.find('.//summary')
        interferencias_totales = summary.get('total')
        Interferencias_totales.append('interferencias_totales')
        interferencias_abiertas = summary.get('active')
        Interferencias_abiertas.append('interferencias_abiertas')
        interferencias_resueltas = summary.get('resolved')
        Interferencias_resueltas.append('interferencias_resueltas')
      for clashresult in root.findall('.//clashresult'):
          nombre_conflicto = f"Conflicto {contador_conflictos}"
          Nombres_confictos.append('nombre_conflicto')
          imagen_filename = clashresult.get('href')
          Imagenes_reportes.append('imagen_filename')
          estado_interferencia = clashresult.get('status')
          Estados_interferecnias.append('estado_interferencia')
          distancia = clashresult.get('distance')
          Distancias_interferencias.append('distancia')
          clashpoint = clashresult.find('.//clashpoint/pos3f')
          x, y, z = clashpoint.get('x'), clashpoint.get('y'), clashpoint.get('z')
          Ejes_X.append('x')
          Ejes_Y.append('y')
          Ejes_Z.append('z')
          gridlocation = clashresult.find('.//gridlocation').text
          nivel = gridlocation.cdata
          Nivel_interferencia.append('nivel')
          date = clashresult.find('.//createddate/date')
          año, mes, día = date.get('year'), date.get('month'),date.get('day')
          Años.append('año')
          Meses.append('mes')
          Dias.append('día')
          for clashobjects in root.find(.//clashobject'[0]):
            id1 = objectattribute.value.cdata
            ID_elemento_1.append('id1')
            nivel1 = layer.cdata
            Nivel_elemento_1.append('nivel1')
            nombre1.1 = smarttags.smarttag[0].name.cdata
            Nombre_elemento_1.append('nombre1.1')
            tipo1.1 = smarttags.smarttag[0].value.cdata
            Valor_nombre_elemento_1.append('tipo1.1')
            nombre1.2 = smarttags.smarttag[1].name.cdata
            Tipo_elemento_1.append('nombre1.2')
            tipo1.2 = smarttags.smarttag[1].value.cdata
            Tipo_nombre_elemento_1.append('tipo1.2')
          for clashobjects in root.find(.//clashobject'[1]):
            id2 = objectattribute.value.cdata
            ID_elemento_2.append('id2')
            nivel2 = layer.cdata
            Nivel_elemento_2.append('nivel2')
            nombre2.1 = smarttags.smarttag[0].name.cdata
            Nombre_elemento_2.append('nombre2.1')
            tipo2.1 = smarttags.smarttag[0].value.cdata
            Valor_nombre_elemento_2.append('tipo2.1')
            nombre2.2 = smarttags.smarttag[1].name.cdata
            Tipo_elemento_2.append('nombre2.2')
            tipo2.2 = smarttags.smarttag[1].value.cdata
            Tipo_nombre_elemento_2.append('tipo2.2')


        # Agregar detalles al PDF
        c.drawString(10, height - 50, f"Nombre del conflicto: {nombre_conflicto}")
        c.drawString(10, height - 70, f"Distancia: {distancia}")
        c.drawString(10, height - 90, f"Coordenadas del punto de conflicto: ({x}, {y}, {z})")
        c.drawString(10, height - 110, f"Ubicación en la cuadrícula: {gridlocation}")

        # Obtener la imagen asociada
        imagen_path = os.path.join(os.path.dirname(xml_path), imagen_filename.replace('\\', '/'))
        imagen = utils.ImageReader(imagen_path)
        c.drawImage(imagen, 10, height - 250, width=400, height=200)

        # Agregar un salto de página para la próxima interferencia
        c.showPage()

        contador_conflictos += 1

    c.save()
    return nombres_conflictos, nombres_conflictos, nombres_conflictos

xml_path = '/content/2.- ARQ_PUE VS EST.xml'
pdf_output = '/content/downloads/resultado.pdf'

generar_pdf(xml_path, pdf_output)

"""# VARIABLES PARA LA FUNCION"""

xml_path = '/content/2.- ARQ_PUE VS EST.xml'
pdf_output = '/content/downloads/resultado.pdf'

"""# EJECUTAR FUNCION"""

generar_pdf(xml_path, pdf_output)